// Set up Neosemantics settings to graph and fetch Gene Ontology:
CREATE CONSTRAINT n10s_unique_uri FOR (r:Resource)
REQUIRE r.uri IS UNIQUE;
CALL n10s.graphconfig.init();
CALL n10s.onto.import.fetch("http://purl.obolibrary.org/obo/go.owl","RDF/XML");

// find all GO terms that overlap with current SR terms:
CALL {MATCH (n:PHYS)
WITH COLLECT(REPLACE(n.id, ":", "_")) AS terms
return terms}
WITH terms
MATCH (m:n4sch__Class)
WHERE m.n4sch__name in terms
return m;

// Use list of overlapping nodes to merge nodes:
CALL {MATCH (n:PHYS)
return n, COLLECT(REPLACE(n.id, ":", "_")) AS terms}
WITH n, terms
MATCH (m:n4sch__Class)
WHERE m.n4sch__name in terms
CALL apoc.refactor.mergeNodes([n, m],
     {properties:"combine", mergeRels:true})
Yield node
return node;

// assign GO terms as physiology node types:
MATCH (n:n4sch__Class)
SET n:PHYS
RETURN count(n);

// remove RDF class label:
CALL db.labels()
YIELD label WHERE label <> "PHYS"
WITH collect(label) AS labels
MATCH (p:n4sch__Class)
WITH collect(p) AS class, labels
CALL apoc.create.removeLabels(class, labels)
YIELD node
RETURN node, labels(node) AS labels;

// reuse RDF id and label:
CALL db.labels()
YIELD label WHERE label <> "PHYS"
WITH collect(label) AS labels
MATCH (p:n4sch__Class)
WITH collect(p) AS class, labels
CALL apoc.create.removeLabels(class, labels)
YIELD node
RETURN node, labels(node) AS labels;

