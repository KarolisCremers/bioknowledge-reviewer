### build the graph

## build a graph mixing monarch and curation information

# get edges from Monarch
# get list of curated nodes from the biocurated network
import curation
curatedNetwork = curation.readNetwork()
curatedNodesList = get_nodes_to_query_monarch(curatedNetwork)

# from my hypothesis, i have a seed of genes. From Monarch i want to retrieve the first layer of neighbours and its orthopheno information
import monarch
seedList = ['gene1', 'gene2', 'phenotype1', 'metabolite1', 'disease1']

# first layer
neighboursList = monarch.get_neighbours(seedList)

# get orthopheno nodes from seed and neighbors
seedOrthoPhenoList = monarch.get_orthopheno(seedList)
neighboursOrthoPhenoList = monarch.get_orthopheno(neighboursList)

or

seedNeighboursList = seedList.append(neighbousList)
orthoPhenoList = monarch.get_orthopheno(seedNeighboursList)

# combine curated and monarch nodes in a geneList and extract connectivity
geneList = sum([seed, neighbous, orthopheno, curated], [])
monarchEdges = monarch.get_edges(geneList)


# build the graph with curated edges and monarch edges
# get curated edges
curatedEdges = curation.get_edges(curatedNetwork)

# get edges and nodes files for neo4j
# build graph: integrate curation and monarch networks
import graph
graph = graph.build([curatedEdges, monarchEdges])

# get edges 
edges = graph.get_edges(graph)

# get nodes
nodes = graph.get_nodes(graph)

# get edges and files for neo4j
import neo4j
# get neo4j files
statements = neo4j.get_statements(edges)
concepts = neo4j.get_concepts(nodes)

# import the graph into neo4j
# save files into neo4j import dir
path_to_import = neo4j_path + graph_version
neo4j.save_graph([statements, concepts], path_to_import)

# import graph into neo4j
neo4j.import(path_to_import)
